#![doc = "This file was automatically generated by the varlink rust generator"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use serde_derive::{Deserialize, Serialize};
use std::io::BufRead;
use std::sync::{Arc, RwLock};
use varlink::{self, CallTrait};
#[allow(dead_code)]
#[derive(Clone, PartialEq, Debug)]
#[allow(clippy::enum_variant_names)]
pub enum ErrorKind {
    Varlink_Error,
    VarlinkReply_Error,
    DiskError(Option<DiskError_Args>),
}
impl ::std::fmt::Display for ErrorKind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ErrorKind::Varlink_Error => write!(f, "Varlink Error"),
            ErrorKind::VarlinkReply_Error => write!(f, "Varlink error reply"),
            ErrorKind::DiskError(v) => write!(f, "com.serpentos.lichen.disks.DiskError: {v:#?}"),
        }
    }
}
pub struct Error(
    pub ErrorKind,
    pub Option<Box<dyn std::error::Error + 'static + Send + Sync>>,
    pub Option<&'static str>,
);
impl Error {
    #[allow(dead_code)]
    pub fn kind(&self) -> &ErrorKind {
        &self.0
    }
}
impl From<ErrorKind> for Error {
    fn from(e: ErrorKind) -> Self {
        Error(e, None, None)
    }
}
impl std::error::Error for Error {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        self.1
            .as_ref()
            .map(|e| e.as_ref() as &(dyn std::error::Error + 'static))
    }
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        std::fmt::Display::fmt(&self.0, f)
    }
}
impl std::fmt::Debug for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        use std::error::Error as StdError;
        if let Some(ref o) = self.2 {
            std::fmt::Display::fmt(o, f)?;
        }
        std::fmt::Debug::fmt(&self.0, f)?;
        if let Some(e) = self.source() {
            std::fmt::Display::fmt("\nCaused by:\n", f)?;
            std::fmt::Debug::fmt(&e, f)?;
        }
        Ok(())
    }
}
#[allow(dead_code)]
pub type Result<T> = std::result::Result<T, Error>;
impl From<varlink::Error> for Error {
    fn from(e: varlink::Error) -> Self {
        match e.kind() {
            varlink::ErrorKind::VarlinkErrorReply(r) => Error(
                ErrorKind::from(r),
                Some(Box::from(e)),
                Some(concat!(file!(), ":", line!(), ": ")),
            ),
            _ => Error(
                ErrorKind::Varlink_Error,
                Some(Box::from(e)),
                Some(concat!(file!(), ":", line!(), ": ")),
            ),
        }
    }
}
#[allow(dead_code)]
impl Error {
    pub fn source_varlink_kind(&self) -> Option<&varlink::ErrorKind> {
        use std::error::Error as StdError;
        let mut s: &dyn StdError = self;
        while let Some(c) = s.source() {
            let k = self
                .source()
                .and_then(|e| e.downcast_ref::<varlink::Error>())
                .map(|e| e.kind());
            if k.is_some() {
                return k;
            }
            s = c;
        }
        None
    }
}
impl From<&varlink::Reply> for ErrorKind {
    #[allow(unused_variables)]
    fn from(e: &varlink::Reply) -> Self {
        match e {
            varlink::Reply { error: Some(ref t), .. } if t == "com.serpentos.lichen.disks.DiskError" => match e {
                varlink::Reply {
                    parameters: Some(p), ..
                } => match serde_json::from_value(p.clone()) {
                    Ok(v) => ErrorKind::DiskError(v),
                    Err(_) => ErrorKind::DiskError(None),
                },
                _ => ErrorKind::DiskError(None),
            },
            _ => ErrorKind::VarlinkReply_Error,
        }
    }
}
pub trait VarlinkCallError: varlink::CallTrait {
    fn reply_disk_error(&mut self, r#message: String) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "com.serpentos.lichen.disks.DiskError",
            Some(serde_json::to_value(DiskError_Args { r#message }).map_err(varlink::map_context!())?),
        ))
    }
}
impl<'a> VarlinkCallError for varlink::Call<'a> {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum r#Disk_kind {
    r#ssd,
    r#hdd,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct r#Disk {
    pub r#kind: Disk_kind,
    pub r#path: String,
    pub r#model: Option<String>,
    pub r#vendor: Option<String>,
    pub r#size: i64,
    pub r#block_size: i64,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum r#Partition_kind {
    r#esp,
    r#xbootldr,
    r#regular,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub enum r#Partition_superblock_kind {
    r#btrfs,
    r#ext4,
    r#f2fs,
    r#luks2,
    r#xfs,
    r#unknown,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct r#Partition {
    pub r#path: String,
    pub r#kind: Partition_kind,
    pub r#size: i64,
    pub r#uuid: String,
    pub r#superblock_kind: Partition_superblock_kind,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct DiskError_Args {
    pub r#message: String,
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct GetDisks_Reply {
    pub r#disks: Vec<Disk>,
}
impl varlink::VarlinkReply for GetDisks_Reply {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct GetDisks_Args {}
pub trait Call_GetDisks: VarlinkCallError {
    fn reply(&mut self, r#disks: Vec<Disk>) -> varlink::Result<()> {
        self.reply_struct(GetDisks_Reply { r#disks }.into())
    }
}
impl<'a> Call_GetDisks for varlink::Call<'a> {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct GetPartitions_Reply {
    pub r#partitions: Vec<Partition>,
}
impl varlink::VarlinkReply for GetPartitions_Reply {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct GetPartitions_Args {
    pub r#disk: String,
}
pub trait Call_GetPartitions: VarlinkCallError {
    fn reply(&mut self, r#partitions: Vec<Partition>) -> varlink::Result<()> {
        self.reply_struct(GetPartitions_Reply { r#partitions }.into())
    }
}
impl<'a> Call_GetPartitions for varlink::Call<'a> {}
pub trait VarlinkInterface {
    fn get_disks(&self, call: &mut dyn Call_GetDisks) -> varlink::Result<()>;
    fn get_partitions(&self, call: &mut dyn Call_GetPartitions, r#disk: String) -> varlink::Result<()>;
    fn call_upgraded(&self, _call: &mut varlink::Call, _bufreader: &mut dyn BufRead) -> varlink::Result<Vec<u8>> {
        Ok(Vec::new())
    }
}
pub trait VarlinkClientInterface {
    fn get_disks(&mut self) -> varlink::MethodCall<GetDisks_Args, GetDisks_Reply, Error>;
    fn get_partitions(&mut self, r#disk: String)
        -> varlink::MethodCall<GetPartitions_Args, GetPartitions_Reply, Error>;
}
#[allow(dead_code)]
pub struct VarlinkClient {
    connection: Arc<RwLock<varlink::Connection>>,
}
impl VarlinkClient {
    #[allow(dead_code)]
    pub fn new(connection: Arc<RwLock<varlink::Connection>>) -> Self {
        VarlinkClient { connection }
    }
}
impl VarlinkClientInterface for VarlinkClient {
    fn get_disks(&mut self) -> varlink::MethodCall<GetDisks_Args, GetDisks_Reply, Error> {
        varlink::MethodCall::<GetDisks_Args, GetDisks_Reply, Error>::new(
            self.connection.clone(),
            "com.serpentos.lichen.disks.GetDisks",
            GetDisks_Args {},
        )
    }
    fn get_partitions(
        &mut self,
        r#disk: String,
    ) -> varlink::MethodCall<GetPartitions_Args, GetPartitions_Reply, Error> {
        varlink::MethodCall::<GetPartitions_Args, GetPartitions_Reply, Error>::new(
            self.connection.clone(),
            "com.serpentos.lichen.disks.GetPartitions",
            GetPartitions_Args { r#disk },
        )
    }
}
#[allow(dead_code)]
pub struct VarlinkInterfaceProxy {
    inner: Box<dyn VarlinkInterface + Send + Sync>,
}
#[allow(dead_code)]
pub fn new(inner: Box<dyn VarlinkInterface + Send + Sync>) -> VarlinkInterfaceProxy {
    VarlinkInterfaceProxy { inner }
}
impl varlink::Interface for VarlinkInterfaceProxy {
    fn get_description(&self) -> &'static str {
        "# Disk enumeration APIs for Lichen\ninterface com.serpentos.lichen.disks\n\ntype Disk(\n    kind: (ssd, hdd),\n    path: string,\n    model: ?string,\n    vendor: ?string,\n    size: int,\n    block_size: int\n)\n\ntype Partition(\n    path: string,\n    kind: (esp, xbootldr, regular),\n    size: int,\n    uuid: string,\n    superblock_kind: (btrfs, ext4, f2fs, luks2, xfs, unknown)\n)\n\nerror DiskError(\n    message: string\n)\n\n# Enumerate all known disks\nmethod GetDisks() -> (disks:[]Disk)\nmethod GetPartitions(disk: string) -> (partitions:[]Partition)\n"
    }
    fn get_name(&self) -> &'static str {
        "com.serpentos.lichen.disks"
    }
    fn call_upgraded(&self, call: &mut varlink::Call, bufreader: &mut dyn BufRead) -> varlink::Result<Vec<u8>> {
        self.inner.call_upgraded(call, bufreader)
    }
    fn call(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        let req = call.request.unwrap();
        match req.method.as_ref() {
            "com.serpentos.lichen.disks.GetDisks" => self.inner.get_disks(call as &mut dyn Call_GetDisks),
            "com.serpentos.lichen.disks.GetPartitions" => {
                if let Some(args) = req.parameters.clone() {
                    let args: GetPartitions_Args = match serde_json::from_value(args) {
                        Ok(v) => v,
                        Err(e) => {
                            let es = format!("{e}");
                            let _ = call.reply_invalid_parameter(es.clone());
                            return Err(varlink::context!(varlink::ErrorKind::SerdeJsonDe(es)));
                        }
                    };
                    self.inner
                        .get_partitions(call as &mut dyn Call_GetPartitions, args.r#disk)
                } else {
                    call.reply_invalid_parameter("parameters".into())
                }
            }
            m => call.reply_method_not_found(String::from(m)),
        }
    }
}
